def scalaMajorVersion = gradle.ext.scalaMajorVersion
def scalaMinorVersion = gradle.ext.scalaMinorVersion

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.16.1"
    }

    // NOTE(mccartney, 2022-07-11): Keeping these versions here works with Dependabot. Moving to gradle.properties does not.
    ext.commonsCliVersion = '1.5.0'
    ext.commonsIoVersion = '2.15.1'
    ext.jlineVersion = '2.14.6'
    ext.jodaTimeVersion = '2.12.5'
    ext.junitVersion = '4.13.2'
    ext.mockitoVersion = '4.8.1'
    ext.scalaSlackClientVersion = '0.4.0'
    ext.scalatestVersion = '3.0.9'
    ext.slf4jVersion = '2.0.9'
    ext.velocityVersion = '1.7'
}

allprojects {
    apply plugin: "java"
    apply plugin: "scala"
    apply plugin: "maven-publish"
    apply plugin: "com.github.hierynomus.license"
    apply plugin: "signing"

    group = "com.sumologic.shellbase"
    description = "Sumo Logic's Scala-based interactive shell framework"

    version = '3.0.0'

    sourceCompatibility = javaSourceVersion
    targetCompatibility = javaTargetVersion

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        testImplementation "org.scalatest:scalatest_${scalaMajorVersion}:${scalatestVersion}"
        testImplementation "junit:junit:${junitVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    }

    compileScala {
        scalaCompileOptions.additionalParameters = [
                "-feature",
                "-target:jvm-1.8",
                "-deprecation",
                "-language:implicitConversions",
                "-unchecked",
                // TODO: (fdaca 2019-11-18) please consider repairing warnings and enabling this
                //"-Xfatal-warnings"
        ]
    }

    test {
        maxHeapSize = '2g'
        testLogging {
            events 'started', 'failed', 'passed', 'skipped'
            showStandardStreams = true
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    license {
        header rootProject.file('src/etc/header.txt')
        strictCheck true
        exclude "**/warning.txt"
    }
}

subprojects {
    ext.gitCommitIdAbbrev = System.getenv('GIT_COMMIT_ID_ABBREV') ?: 'git rev-parse --verify --short=12 HEAD'.execute().text.trim()

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set('sources')
        from(sourceSets.main.allJava) {
            expand(project: [version: project.version], git: [commit: [id: [abbrev: gitCommitIdAbbrev]]])
        }
        from(sourceSets.main.allScala)
    }

    task javadocJar(type: Jar, dependsOn: scaladoc) {
        from javadoc
        from scaladoc
        archiveClassifier.set('javadoc')
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId(project.group)
                artifactId(project.name + "_${scalaMajorVersion}")
                version(project.version)

                pom {
                    name = project.name
                    description = project.description
                    url = 'https://github.com/SumoLogic/shellbase'

                    licenses {
                        license {
                            name = 'Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'goledzki'
                            name = 'Greg Oledzki'
                            organization = 'Sumo Logic'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:SumoLogic/shellbase.git'
                        developerConnection = 'scm:git:git@github.com:SumoLogic/shellbase.git'
                        url = 'https://github.com/SumoLogic/shellbase'
                        tag = 'HEAD'
                    }
                }

                from(components.java)
                artifact(sourcesJar)
                artifact(javadocJar)
            }
        }
        repositories {
            maven {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username project.findProperty('nexus_username') ?: ""
                    password project.findProperty('nexus_password') ?: ""
                }
            }
        }
    }

    signing {
        useGpgCmd()
        sign publishing.publications.maven
    }
}

project(':shellbase-core') {
    dependencies {
        implementation "joda-time:joda-time:${jodaTimeVersion}"
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"
        implementation "commons-cli:commons-cli:${commonsCliVersion}"
        implementation "commons-io:commons-io:${commonsIoVersion}"
        implementation "jline:jline:${jlineVersion}"
        implementation "org.apache.velocity:velocity:${velocityVersion}"
        implementation "org.scala-lang:scala-library:${scalaMajorVersion}.${scalaMinorVersion}"
    }
}

project(':shellbase-example') {
    dependencies {
        implementation project(':shellbase-core')
        implementation "jline:jline:${jlineVersion}"
        implementation "org.scala-lang:scala-library:${scalaMajorVersion}.${scalaMinorVersion}"
        implementation "org.apache.velocity:velocity:${velocityVersion}"
        implementation "commons-cli:commons-cli:${commonsCliVersion}"
    }
}

project(':shellbase-slack') {
    dependencies {
        implementation project(':shellbase-core')
        implementation "com.github.slack-scala-client:slack-scala-client_${scalaMajorVersion}:${scalaSlackClientVersion}"
        implementation "jline:jline:${jlineVersion}"
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"
        implementation "org.apache.velocity:velocity:${velocityVersion}"
        implementation "commons-cli:commons-cli:${commonsCliVersion}"
    }
}
